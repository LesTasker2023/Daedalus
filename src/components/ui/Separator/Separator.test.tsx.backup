import { render, screen } from '@testing-library/react';
import { describe, expect, it } from 'vitest';
import { Separator } from './Separator';

describe('Separator Component', () => {
  const renderBasicSeparator = (props = {}) => {
    return render(
      <Separator data-testid="separator" {...props} />
    );
  };

  describe('Snapshots', () => {
    it('matches default snapshot', () => {
      const { container } = renderBasicSeparator();
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches horizontal snapshot', () => {
      const { container } = renderBasicSeparator({ orientation: 'horizontal' });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches vertical snapshot', () => {
      const { container } = renderBasicSeparator({ orientation: 'vertical' });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches with custom className snapshot', () => {
      const { container } = renderBasicSeparator({ className: 'custom-separator' });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches decorative snapshot', () => {
      const { container } = renderBasicSeparator({ decorative: true });
      expect(container.firstChild).toMatchSnapshot();
    });
  });

  describe('Basic Functionality', () => {
    it('renders correctly', () => {
      renderBasicSeparator();
      expect(screen.getByTestId('separator')).toBeInTheDocument();
    });

    it('has correct default orientation', () => {
      renderBasicSeparator();
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'horizontal');
    });

    it('applies horizontal orientation', () => {
      renderBasicSeparator({ orientation: 'horizontal' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'horizontal');
    });

    it('applies vertical orientation', () => {
      renderBasicSeparator({ orientation: 'vertical' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
    });

    it('renders as div element by default', () => {
      renderBasicSeparator();
      const separator = screen.getByTestId('separator');
      expect(separator.tagName).toBe('DIV');
    });

    it('has proper role for accessibility', () => {
      renderBasicSeparator();
      const separator = screen.getByTestId('separator');
      // Radix UI Separator defaults to role="none" (decorative)
      expect(separator).toHaveAttribute('role', 'none');
    });
  });

  describe('Orientation Variants', () => {
    it('applies correct classes for horizontal orientation', () => {
      renderBasicSeparator({ orientation: 'horizontal' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'horizontal');
      expect(separator).toHaveClass('shrink-0', 'bg-border', 'h-[1px]', 'w-full');
    });

    it('applies correct classes for vertical orientation', () => {
      renderBasicSeparator({ orientation: 'vertical' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
      expect(separator).toHaveClass('shrink-0', 'bg-border', 'h-full', 'w-[1px]');
    });

    it('switches orientation dynamically', () => {
      const { rerender } = renderBasicSeparator({ orientation: 'horizontal' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'horizontal');
      
      rerender(<Separator data-testid="separator" orientation="vertical" />);
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
    });
  });

  describe('Accessibility', () => {
    it('has decorative role by default', () => {
      renderBasicSeparator();
      const separator = screen.getByTestId('separator');
      // Radix UI Separator is decorative by default
      expect(separator).toHaveAttribute('role', 'none');
    });

    it('supports decorative mode', () => {
      renderBasicSeparator({ decorative: true });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('role', 'none');
    });

    it('uses data-orientation for styling', () => {
      renderBasicSeparator({ orientation: 'vertical' });
      const separator = screen.getByTestId('separator');
      // Radix UI uses data-orientation instead of aria-orientation for styling
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
    });

    it('supports custom aria-label', () => {
      renderBasicSeparator({ 'aria-label': 'Section divider' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('aria-label', 'Section divider');
    });

    it('is not focusable by default', () => {
      renderBasicSeparator();
      const separator = screen.getByTestId('separator');
      expect(separator).not.toHaveAttribute('tabindex');
    });

    it('supports custom tabindex when needed', () => {
      renderBasicSeparator({ tabIndex: 0 });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('tabindex', '0');
    });
  });

  describe('Styling and Layout', () => {
    it('accepts custom className', () => {
      renderBasicSeparator({ className: 'custom-separator-class' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveClass('custom-separator-class');
    });

    it('applies base styling classes', () => {
      renderBasicSeparator();
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveClass('shrink-0', 'bg-border');
    });

    it('merges custom and default classes', () => {
      renderBasicSeparator({ className: 'my-4 border-red-500' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveClass('shrink-0', 'bg-border', 'my-4', 'border-red-500');
    });

    it('accepts style prop correctly', () => {
      renderBasicSeparator({ style: { backgroundColor: 'red', height: '2px' } });
      const separator = screen.getByTestId('separator');
      // Just verify the element exists and style prop was applied
      expect(separator).toBeInTheDocument();
      expect(separator).toHaveAttribute('style');
    });

    it('maintains aspect ratio for orientations', () => {
      const { rerender } = renderBasicSeparator({ orientation: 'horizontal' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveClass('h-[1px]', 'w-full');
      
      rerender(<Separator data-testid="separator" orientation="vertical" />);
      expect(separator).toHaveClass('h-full', 'w-[1px]');
    });
  });

  describe('Custom Props and Ref Forwarding', () => {
    it('forwards refs correctly', () => {
      const ref = { current: null };
      render(<Separator ref={ref} data-testid="separator" />);
      expect(ref.current).toBeInstanceOf(HTMLElement);
    });

    it('spreads additional props', () => {
      renderBasicSeparator({ 
        'data-custom': 'test-value',
        'aria-hidden': true,
        id: 'custom-separator-id'
      });
      
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-custom', 'test-value');
      expect(separator).toHaveAttribute('aria-hidden', 'true');
      expect(separator).toHaveAttribute('id', 'custom-separator-id');
    });

    it('supports custom HTML attributes', () => {
      renderBasicSeparator({ 
        title: 'Separator tooltip',
        'data-section': 'main-content'
      });
      
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('title', 'Separator tooltip');
      expect(separator).toHaveAttribute('data-section', 'main-content');
    });

    it('handles boolean props correctly', () => {
      renderBasicSeparator({ 
        decorative: true,
        hidden: false
      });
      
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('role', 'none');
      expect(separator).not.toHaveAttribute('hidden');
    });
  });

  describe('Edge Cases', () => {
    it('handles null and undefined props gracefully', () => {
      renderBasicSeparator({ 
        className: null,
        orientation: undefined,
        style: null
      });
      
      const separator = screen.getByTestId('separator');
      expect(separator).toBeInTheDocument();
      expect(separator).toHaveAttribute('data-orientation', 'horizontal'); // Default
    });

    it('handles empty string props', () => {
      renderBasicSeparator({ 
        className: '',
        'aria-label': ''
      });
      
      const separator = screen.getByTestId('separator');
      expect(separator).toBeInTheDocument();
    });

    it('handles orientation prop changes gracefully', () => {
      // Test with valid orientations
      const { rerender } = renderBasicSeparator({ orientation: 'horizontal' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'horizontal');
      
      rerender(<Separator data-testid="separator" orientation="vertical" />);
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
    });

    it('handles component unmounting cleanly', () => {
      const { unmount } = renderBasicSeparator();
      expect(() => unmount()).not.toThrow();
    });

    it('preserves functionality after remounting', () => {
      const { unmount } = renderBasicSeparator({ orientation: 'vertical' });
      unmount();
      
      renderBasicSeparator({ orientation: 'vertical' });
      const separator = screen.getByTestId('separator');
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
    });

    it('handles rapid prop changes', () => {
      const { rerender } = renderBasicSeparator({ orientation: 'horizontal' });
      const separator = screen.getByTestId('separator');
      
      // Rapid orientation changes
      rerender(<Separator data-testid="separator" orientation="vertical" />);
      rerender(<Separator data-testid="separator" orientation="horizontal" />);
      rerender(<Separator data-testid="separator" orientation="vertical" />);
      
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
    });

    it('handles complex prop combinations', () => {
      renderBasicSeparator({ 
        orientation: 'vertical',
        decorative: true,
        className: 'complex-class',
        'aria-label': 'Complex separator',
        style: { margin: '16px' }
      });
      
      const separator = screen.getByTestId('separator');
      expect(separator).toBeInTheDocument();
      expect(separator).toHaveAttribute('data-orientation', 'vertical');
      expect(separator).toHaveAttribute('role', 'none');
      expect(separator).toHaveClass('complex-class');
    });

    it('maintains performance with many re-renders', () => {
      const { rerender } = renderBasicSeparator();
      
      // Multiple re-renders with different props
      for (let i = 0; i < 10; i++) {
        rerender(
          <Separator 
            data-testid="separator" 
            orientation={i % 2 === 0 ? 'horizontal' : 'vertical'}
            className={`iteration-${i}`}
          />
        );
      }
      
      const separator = screen.getByTestId('separator');
      expect(separator).toBeInTheDocument();
      expect(separator).toHaveClass('iteration-9');
    });
  });
});
