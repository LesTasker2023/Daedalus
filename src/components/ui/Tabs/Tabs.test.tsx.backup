import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import * as React from 'react';
import { describe, expect, it } from 'vitest';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './tabs';

describe('Tabs', () => {
  describe('Snapshots', () => {
    it('matches default snapshot', () => {
      const { container } = render(
        <Tabs defaultValue="tab1">
          <TabsList>
            <TabsTrigger value="tab1">Tab 1</TabsTrigger>
            <TabsTrigger value="tab2">Tab 2</TabsTrigger>
          </TabsList>
          <TabsContent value="tab1">Content 1</TabsContent>
          <TabsContent value="tab2">Content 2</TabsContent>
        </Tabs>
      );
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches all sizes snapshot', () => {
      const { container } = render(
        <div>
          <Tabs defaultValue="tab1">
            <TabsList size="sm">
              <TabsTrigger value="tab1" size="sm">
                Small Tab 1
              </TabsTrigger>
              <TabsTrigger value="tab2" size="sm">
                Small Tab 2
              </TabsTrigger>
            </TabsList>
            <TabsContent value="tab1">Small Content 1</TabsContent>
            <TabsContent value="tab2">Small Content 2</TabsContent>
          </Tabs>
          <Tabs defaultValue="tab1">
            <TabsList size="default">
              <TabsTrigger value="tab1" size="default">
                Default Tab 1
              </TabsTrigger>
              <TabsTrigger value="tab2" size="default">
                Default Tab 2
              </TabsTrigger>
            </TabsList>
            <TabsContent value="tab1">Default Content 1</TabsContent>
            <TabsContent value="tab2">Default Content 2</TabsContent>
          </Tabs>
          <Tabs defaultValue="tab1">
            <TabsList size="lg">
              <TabsTrigger value="tab1" size="lg">
                Large Tab 1
              </TabsTrigger>
              <TabsTrigger value="tab2" size="lg">
                Large Tab 2
              </TabsTrigger>
            </TabsList>
            <TabsContent value="tab1">Large Content 1</TabsContent>
            <TabsContent value="tab2">Large Content 2</TabsContent>
          </Tabs>
          <Tabs defaultValue="tab1">
            <TabsList size="xl">
              <TabsTrigger value="tab1" size="xl">
                Extra Large Tab 1
              </TabsTrigger>
              <TabsTrigger value="tab2" size="xl">
                Extra Large Tab 2
              </TabsTrigger>
            </TabsList>
            <TabsContent value="tab1">Extra Large Content 1</TabsContent>
            <TabsContent value="tab2">Extra Large Content 2</TabsContent>
          </Tabs>
        </div>
      );
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches enhanced features snapshot', () => {
      const { container } = render(
        <Tabs defaultValue="tab1">
          <TabsList>
            <TabsTrigger value="tab1" badge="3">
              Tab with Badge
            </TabsTrigger>
            <TabsTrigger value="tab2" loading>
              Loading Tab
            </TabsTrigger>
            <TabsTrigger value="tab3">Normal Tab</TabsTrigger>
          </TabsList>
          <TabsContent value="tab1">Badge Content</TabsContent>
          <TabsContent value="tab2">Loading Content</TabsContent>
          <TabsContent value="tab3">Normal Content</TabsContent>
        </Tabs>
      );
      expect(container.firstChild).toMatchSnapshot();
    });
  });

  describe('Functionality', () => {
    it('renders correctly', () => {
      render(
        <Tabs defaultValue="test" data-testid="tabs">
          <TabsList>
            <TabsTrigger value="test">Test</TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );
      expect(screen.getByTestId('tabs')).toBeInTheDocument();
    });

    it('supports size prop', () => {
      render(
        <Tabs defaultValue="test" data-testid="tabs">
          <TabsList size="lg" data-testid="tabs-list">
            <TabsTrigger value="test" size="lg" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      const tabsTrigger = screen.getByTestId('tabs-trigger');

      expect(tabsList).toHaveClass('h-10', 'text-base');
      expect(tabsTrigger).toHaveClass('px-4', 'py-2', 'text-base');
    });

    it('switches between tabs correctly', () => {
      render(
        <Tabs defaultValue="tab1">
          <TabsList>
            <TabsTrigger value="tab1">Tab 1</TabsTrigger>
            <TabsTrigger value="tab2">Tab 2</TabsTrigger>
          </TabsList>
          <TabsContent value="tab1">Content 1</TabsContent>
          <TabsContent value="tab2">Content 2</TabsContent>
        </Tabs>
      );

      const tab1Trigger = screen.getByRole('tab', { name: 'Tab 1' });
      const tab2Trigger = screen.getByRole('tab', { name: 'Tab 2' });

      // Initially tab1 should be active
      expect(tab1Trigger).toHaveAttribute('data-state', 'active');
      expect(tab1Trigger).toHaveAttribute('aria-selected', 'true');
      expect(tab2Trigger).toHaveAttribute('data-state', 'inactive');
      expect(tab2Trigger).toHaveAttribute('aria-selected', 'false');

      // Verify that tabs are clickable (interaction test)
      expect(tab2Trigger).not.toBeDisabled();
      expect(tab1Trigger).not.toBeDisabled();
    });
  });

  describe('Sizes', () => {
    it('renders small size correctly', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList size="sm" data-testid="tabs-list">
            <TabsTrigger value="test" size="sm" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      const tabsTrigger = screen.getByTestId('tabs-trigger');

      expect(tabsList).toHaveClass('h-8', 'text-xs');
      expect(tabsTrigger).toHaveClass('px-2', 'py-1', 'text-xs');
    });

    it('renders default size correctly', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList size="default" data-testid="tabs-list">
            <TabsTrigger value="test" size="default" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      const tabsTrigger = screen.getByTestId('tabs-trigger');

      expect(tabsList).toHaveClass('h-9', 'text-sm');
      expect(tabsTrigger).toHaveClass('px-3', 'py-1', 'text-sm');
    });

    it('renders large size correctly', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList size="lg" data-testid="tabs-list">
            <TabsTrigger value="test" size="lg" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      const tabsTrigger = screen.getByTestId('tabs-trigger');

      expect(tabsList).toHaveClass('h-10', 'text-base');
      expect(tabsTrigger).toHaveClass('px-4', 'py-2', 'text-base');
    });

    it('renders extra large size correctly', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList size="xl" data-testid="tabs-list">
            <TabsTrigger value="test" size="xl" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      const tabsTrigger = screen.getByTestId('tabs-trigger');

      expect(tabsList).toHaveClass('h-12', 'text-lg');
      expect(tabsTrigger).toHaveClass('px-6', 'py-3', 'text-lg');
    });
  });

  describe('Enhanced Features', () => {
    it('renders badges correctly', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList>
            <TabsTrigger value="test" badge="5" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsTrigger = screen.getByTestId('tabs-trigger');
      expect(tabsTrigger).toHaveAttribute('data-badge', '5');
      expect(tabsTrigger).toHaveClass('tabs__trigger--badge');
    });

    it('renders loading state correctly', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList>
            <TabsTrigger value="test" loading data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsTrigger = screen.getByTestId('tabs-trigger');
      expect(tabsTrigger).toHaveClass('tabs__trigger--loading');
    });

    it('does not add badge class when badge is empty', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList>
            <TabsTrigger value="test" badge="" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsTrigger = screen.getByTestId('tabs-trigger');
      expect(tabsTrigger).not.toHaveClass('tabs__trigger--badge');
    });
  });

  describe('Custom Styling', () => {
    it('accepts custom className on Tabs', () => {
      render(
        <Tabs defaultValue="test" className="custom-tabs" data-testid="tabs">
          <TabsList>
            <TabsTrigger value="test">Test</TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabs = screen.getByTestId('tabs');
      expect(tabs).toHaveClass('custom-tabs');
    });

    it('accepts custom className on TabsList', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList className="custom-list" data-testid="tabs-list">
            <TabsTrigger value="test">Test</TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      expect(tabsList).toHaveClass('custom-list');
    });

    it('accepts custom className on TabsTrigger', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList>
            <TabsTrigger value="test" className="custom-trigger" data-testid="tabs-trigger">
              Test
            </TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      const tabsTrigger = screen.getByTestId('tabs-trigger');
      expect(tabsTrigger).toHaveClass('custom-trigger');
    });

    it('accepts custom className on TabsContent', () => {
      render(
        <Tabs defaultValue="test">
          <TabsList>
            <TabsTrigger value="test">Test</TabsTrigger>
          </TabsList>
          <TabsContent value="test" className="custom-content" data-testid="tabs-content">
            Test Content
          </TabsContent>
        </Tabs>
      );

      const tabsContent = screen.getByTestId('tabs-content');
      expect(tabsContent).toHaveClass('custom-content');
    });
  });

  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      render(
        <Tabs defaultValue="tab1">
          <TabsList data-testid="tabs-list">
            <TabsTrigger value="tab1" data-testid="tabs-trigger">
              Tab 1
            </TabsTrigger>
            <TabsTrigger value="tab2">Tab 2</TabsTrigger>
          </TabsList>
          <TabsContent value="tab1" data-testid="tabs-content">
            Content 1
          </TabsContent>
          <TabsContent value="tab2">Content 2</TabsContent>
        </Tabs>
      );

      const tabsList = screen.getByTestId('tabs-list');
      const tabsTrigger = screen.getByTestId('tabs-trigger');
      const tabsContent = screen.getByTestId('tabs-content');

      expect(tabsList).toHaveAttribute('role', 'tablist');
      expect(tabsTrigger).toHaveAttribute('role', 'tab');
      expect(tabsContent).toHaveAttribute('role', 'tabpanel');
    });

    it('supports keyboard navigation', async () => {
      render(
        <Tabs defaultValue="tab1">
          <TabsList>
            <TabsTrigger value="tab1">Tab 1</TabsTrigger>
            <TabsTrigger value="tab2">Tab 2</TabsTrigger>
          </TabsList>
        </Tabs>
      );

      const tab1 = screen.getByText('Tab 1');
      const tab2 = screen.getByText('Tab 2');

      // Focus first tab
      tab1.focus();
      expect(tab1).toHaveFocus();

      // Arrow key navigation with async handling
      fireEvent.keyDown(tab1, { key: 'ArrowRight' });

      // Use waitFor for focus changes
      await waitFor(() => {
        expect(tab2).toHaveFocus();
      });

      fireEvent.keyDown(tab2, { key: 'ArrowLeft' });

      await waitFor(() => {
        expect(tab1).toHaveFocus();
      });
    });
  });

  describe('Ref Forwarding', () => {
    it('forwards ref correctly', () => {
      const ref = React.createRef<HTMLDivElement>();

      render(
        <Tabs ref={ref} defaultValue="test">
          <TabsList>
            <TabsTrigger value="test">Test</TabsTrigger>
          </TabsList>
          <TabsContent value="test">Test Content</TabsContent>
        </Tabs>
      );

      expect(ref.current).toBeInstanceOf(HTMLDivElement);
    });
  });
});
