import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, expect, it, vi } from 'vitest';
import { Checkbox } from './checkbox';

describe('Checkbox', () => {
  const renderBasicCheckbox = (props = {}) => {
    return render(
      <Checkbox data-testid="checkbox" {...props} />
    );
  };

  describe('Snapshots', () => {
    it('matches default snapshot', () => {
      const { container } = renderBasicCheckbox();
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches checked snapshot', () => {
      const { container } = renderBasicCheckbox({ checked: true });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches disabled snapshot', () => {
      const { container } = renderBasicCheckbox({ disabled: true });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches with label snapshot', () => {
      const { container } = render(
        <div>
          <Checkbox data-testid="checkbox" id="test-checkbox" />
          <label htmlFor="test-checkbox">Test Label</label>
        </div>
      );
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches indeterminate snapshot', () => {
      const { container } = renderBasicCheckbox({ checked: 'indeterminate' });
      expect(container.firstChild).toMatchSnapshot();
    });
  });

  describe('Basic Functionality', () => {
    it('renders correctly', () => {
      renderBasicCheckbox();
      expect(screen.getByTestId('checkbox')).toBeInTheDocument();
    });

    it('can be checked and unchecked', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      
      await user.click(checkbox);
      expect(onCheckedChange).toHaveBeenCalledWith(true);
      
      await user.click(checkbox);
      expect(onCheckedChange).toHaveBeenCalledWith(false);
    });

    it('handles controlled state', () => {
      const { rerender } = renderBasicCheckbox({ checked: false });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).not.toBeChecked();
      
      rerender(<Checkbox data-testid="checkbox" checked={true} />);
      expect(checkbox).toBeChecked();
    });

    it('handles uncontrolled state', async () => {
      const user = userEvent.setup();
      renderBasicCheckbox({ defaultChecked: false });
      
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).not.toBeChecked();
      
      await user.click(checkbox);
      expect(checkbox).toBeChecked();
    });

    it('handles indeterminate state', () => {
      renderBasicCheckbox({ checked: 'indeterminate' });
      const checkbox = screen.getByTestId('checkbox');
      // Radix UI uses aria-checked="mixed" for indeterminate state
      expect(checkbox).toHaveAttribute('aria-checked', 'mixed');
    });

    it('can toggle between checked and indeterminate states', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ 
        checked: 'indeterminate',
        onCheckedChange 
      });
      
      const checkbox = screen.getByTestId('checkbox');
      await user.click(checkbox);
      
      // Should toggle from indeterminate to checked
      expect(onCheckedChange).toHaveBeenCalledWith(true);
    });
  });

  describe('States and Variants', () => {
    it('handles disabled state correctly', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ disabled: true, onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toBeDisabled();
      
      await user.click(checkbox);
      expect(onCheckedChange).not.toHaveBeenCalled();
    });

    it('applies disabled attribute when disabled', () => {
      renderBasicCheckbox({ disabled: true });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toBeDisabled();
    });

    it('supports aria-required for validation', () => {
      renderBasicCheckbox({ 'aria-required': true });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('aria-required', 'true');
    });

    it('supports aria-describedby for error messages', () => {
      render(
        <div>
          <Checkbox 
            data-testid="checkbox"
            aria-describedby="error-message"
          />
          <div id="error-message">This field is required</div>
        </div>
      );
      
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('aria-describedby', 'error-message');
    });
  });

  describe('Form Integration', () => {
    it('renders as button type by default', () => {
      renderBasicCheckbox();
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('type', 'button');
      expect(checkbox).toHaveAttribute('role', 'checkbox');
    });

    it('maintains state through interactions', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      await user.click(checkbox);
      
      expect(onCheckedChange).toHaveBeenCalledWith(true);
      expect(checkbox).toHaveAttribute('aria-checked', 'true');
    });

    it('supports form validation with aria attributes', () => {
      renderBasicCheckbox({ 
        'aria-required': true,
        'aria-invalid': true 
      });
      
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('aria-required', 'true');
      expect(checkbox).toHaveAttribute('aria-invalid', 'true');
    });
  });

  describe('Accessibility', () => {
    it('has proper role', () => {
      renderBasicCheckbox();
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('role', 'checkbox');
    });

    it('can be focused with keyboard', () => {
      renderBasicCheckbox();
      const checkbox = screen.getByTestId('checkbox');
      checkbox.focus();
      expect(checkbox).toHaveFocus();
    });

    it('supports keyboard interaction', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      checkbox.focus();
      
      await user.keyboard(' ');
      expect(onCheckedChange).toHaveBeenCalledWith(true);
    });

    it('supports Space key interaction only', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      checkbox.focus();
      
      // Enter doesn't work on Radix checkbox buttons
      await user.keyboard('{Enter}');
      expect(onCheckedChange).not.toHaveBeenCalled();
      
      // Space works
      await user.keyboard(' ');
      expect(onCheckedChange).toHaveBeenCalledWith(true);
    });

    it('announces state changes to screen readers', () => {
      renderBasicCheckbox({ checked: true });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('aria-checked', 'true');
    });

    it('announces indeterminate state correctly', () => {
      renderBasicCheckbox({ checked: 'indeterminate' });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('aria-checked', 'mixed');
    });

    it('supports custom aria-label', () => {
      renderBasicCheckbox({ 'aria-label': 'Custom checkbox label' });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('aria-label', 'Custom checkbox label');
    });
  });

  describe('Custom Styling and Props', () => {
    it('accepts custom className', () => {
      renderBasicCheckbox({ className: 'custom-checkbox' });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveClass('custom-checkbox');
    });

    it('forwards refs correctly', () => {
      const ref = vi.fn();
      renderBasicCheckbox({ ref });
      expect(ref).toHaveBeenCalled();
    });

    it('spreads additional props', () => {
      renderBasicCheckbox({ 'data-custom': 'test-value' });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('data-custom', 'test-value');
    });

    it('supports custom id', () => {
      renderBasicCheckbox({ id: 'custom-checkbox-id' });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toHaveAttribute('id', 'custom-checkbox-id');
    });
  });

  describe('Edge Cases', () => {
    it('handles rapid clicking', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      
      // Rapid clicks
      await user.click(checkbox);
      await user.click(checkbox);
      await user.click(checkbox);
      
      expect(onCheckedChange).toHaveBeenCalledTimes(3);
    });

    it('handles state changes during disabled state', () => {
      const { rerender } = renderBasicCheckbox({ checked: false, disabled: true });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).not.toBeChecked();
      expect(checkbox).toBeDisabled();
      
      rerender(<Checkbox data-testid="checkbox" checked={true} disabled={true} />);
      expect(checkbox).toBeChecked();
      expect(checkbox).toBeDisabled();
    });

    it('handles component unmounting cleanly', () => {
      const { unmount } = renderBasicCheckbox({ checked: true });
      expect(() => unmount()).not.toThrow();
    });

    it('preserves functionality after remounting', async () => {
      const user = userEvent.setup();
      const { unmount } = renderBasicCheckbox();
      unmount();
      
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      await user.click(checkbox);
      expect(onCheckedChange).toHaveBeenCalledWith(true);
    });

    it('handles null and undefined props gracefully', () => {
      renderBasicCheckbox({ 
        checked: undefined,
        onCheckedChange: undefined,
        className: null
      });
      
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).toBeInTheDocument();
    });

    it('handles changing between controlled and uncontrolled', () => {
      const { rerender } = renderBasicCheckbox({ defaultChecked: false });
      const checkbox = screen.getByTestId('checkbox');
      expect(checkbox).not.toBeChecked();
      
      // Switch to controlled
      rerender(<Checkbox data-testid="checkbox" checked={true} />);
      expect(checkbox).toBeChecked();
    });

    it('handles complex interaction patterns', async () => {
      const user = userEvent.setup();
      const onCheckedChange = vi.fn();
      renderBasicCheckbox({ onCheckedChange });
      
      const checkbox = screen.getByTestId('checkbox');
      
      // Focus, then space, then click
      checkbox.focus();
      await user.keyboard(' ');
      await user.click(checkbox);
      
      expect(onCheckedChange).toHaveBeenCalledTimes(2);
    });
  });
});
