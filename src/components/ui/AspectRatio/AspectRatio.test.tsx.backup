import { render, screen } from '@testing-library/react';
import { describe, expect, it, vi } from 'vitest';
import { AspectRatio } from './AspectRatio';

describe('AspectRatio', () => {
  const renderBasicAspectRatio = (props = {}) => {
    return render(
      <AspectRatio data-testid="aspectratio" ratio={16 / 9} {...props}>
        <div data-testid="aspectratio-content">Test content</div>
      </AspectRatio>
    );
  };

  describe('Snapshots', () => {
    it('matches default snapshot', () => {
      const { container } = renderBasicAspectRatio();
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches 16:9 ratio snapshot', () => {
      const { container } = renderBasicAspectRatio({ ratio: 16 / 9 });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches square ratio snapshot', () => {
      const { container } = renderBasicAspectRatio({ ratio: 1 });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches 4:3 ratio snapshot', () => {
      const { container } = renderBasicAspectRatio({ ratio: 4 / 3 });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches with custom className snapshot', () => {
      const { container } = renderBasicAspectRatio({ className: 'custom-aspect-ratio' });
      expect(container.firstChild).toMatchSnapshot();
    });

    it('matches with complex content snapshot', () => {
      const { container } = render(
        <AspectRatio data-testid="aspectratio" ratio={21 / 9}>
          <div 
            data-testid="image-placeholder"
            style={{ width: '100%', height: '100%', backgroundColor: '#f0f0f0', display: 'flex', alignItems: 'center', justifyContent: 'center' }}
          >
            Image Placeholder
          </div>
        </AspectRatio>
      );
      expect(container.firstChild).toMatchSnapshot();
    });
  });

  describe('Basic Functionality', () => {
    it('renders correctly', () => {
      renderBasicAspectRatio();
      expect(screen.getByTestId('aspectratio')).toBeInTheDocument();
      expect(screen.getByTestId('aspectratio-content')).toBeInTheDocument();
    });

    it('applies correct aspect ratio styles', () => {
      renderBasicAspectRatio({ ratio: 16 / 9 });
      const aspectRatio = screen.getByTestId('aspectratio');
      // Radix UI AspectRatio uses position: absolute
      expect(aspectRatio).toHaveStyle({ position: 'absolute' });
    });

    it('renders children correctly', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={1}>
          <div data-testid="child-content">Child content</div>
          <span data-testid="child-span">Child span</span>
        </AspectRatio>
      );
      
      expect(screen.getByTestId('child-content')).toBeInTheDocument();
      expect(screen.getByTestId('child-span')).toBeInTheDocument();
    });

    it('maintains aspect ratio with different content', () => {
      const { rerender } = renderBasicAspectRatio({ ratio: 2 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
      
      rerender(
        <AspectRatio data-testid="aspectratio" ratio={2}>
          <video data-testid="video-content" controls>
            <source src="test-video.mp4" type="video/mp4" />
          </video>
        </AspectRatio>
      );
      
      expect(screen.getByTestId('video-content')).toBeInTheDocument();
    });

    it('handles dynamic ratio changes', () => {
      const { rerender } = renderBasicAspectRatio({ ratio: 16 / 9 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
      
      rerender(
        <AspectRatio data-testid="aspectratio" ratio={1}>
          <div data-testid="aspectratio-content">Test content</div>
        </AspectRatio>
      );
      
      expect(aspectRatio).toBeInTheDocument();
    });
  });

  describe('Ratio Variants', () => {
    const commonRatios = [
      { name: '16:9 (widescreen)', ratio: 16 / 9 },
      { name: '4:3 (standard)', ratio: 4 / 3 },
      { name: '1:1 (square)', ratio: 1 },
      { name: '21:9 (ultrawide)', ratio: 21 / 9 },
      { name: '3:2 (photography)', ratio: 3 / 2 },
      { name: '9:16 (portrait)', ratio: 9 / 16 }
    ];

    commonRatios.forEach(({ name, ratio }) => {
      it(`handles ${name} ratio correctly`, () => {
        renderBasicAspectRatio({ ratio });
        const aspectRatio = screen.getByTestId('aspectratio');
        expect(aspectRatio).toBeInTheDocument();
        expect(aspectRatio).toHaveAttribute('data-testid', 'aspectratio');
      });
    });

    it('handles custom ratio values', () => {
      const customRatio = 2.35; // Cinemascope
      renderBasicAspectRatio({ ratio: customRatio });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles very small ratios', () => {
      renderBasicAspectRatio({ ratio: 0.1 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles very large ratios', () => {
      renderBasicAspectRatio({ ratio: 10 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });
  });

  describe('Content Types', () => {
    it('works with image content', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={16 / 9}>
          <div 
            data-testid="image-content"
            role="img"
            aria-label="Test image"
            style={{ width: '100%', height: '100%', backgroundColor: '#e0e0e0', display: 'flex', alignItems: 'center', justifyContent: 'center' }}
          >
            Image Placeholder
          </div>
        </AspectRatio>
      );
      
      expect(screen.getByTestId('image-content')).toBeInTheDocument();
      expect(screen.getByTestId('image-content')).toHaveAttribute('aria-label', 'Test image');
    });

    it('works with video content', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={16 / 9}>
          <video data-testid="video-content" controls style={{ width: '100%', height: '100%' }}>
            <source src="test-video.mp4" type="video/mp4" />
          </video>
        </AspectRatio>
      );
      
      expect(screen.getByTestId('video-content')).toBeInTheDocument();
    });

    it('works with iframe content', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={16 / 9}>
          <iframe 
            data-testid="iframe-content"
            src="https://example.com"
            title="Test iframe"
            style={{ width: '100%', height: '100%', border: 'none' }}
          />
        </AspectRatio>
      );
      
      expect(screen.getByTestId('iframe-content')).toBeInTheDocument();
    });

    it('works with canvas content', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={1}>
          <canvas 
            data-testid="canvas-content"
            width="400" 
            height="400"
            style={{ width: '100%', height: '100%' }}
          />
        </AspectRatio>
      );
      
      expect(screen.getByTestId('canvas-content')).toBeInTheDocument();
    });

    it('works with complex nested content', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={4 / 3}>
          <div style={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column' }}>
            <header data-testid="header">Header</header>
            <main data-testid="main" style={{ flex: 1 }}>Main content</main>
            <footer data-testid="footer">Footer</footer>
          </div>
        </AspectRatio>
      );
      
      expect(screen.getByTestId('header')).toBeInTheDocument();
      expect(screen.getByTestId('main')).toBeInTheDocument();
      expect(screen.getByTestId('footer')).toBeInTheDocument();
    });
  });

  describe('Styling and Layout', () => {
    it('accepts custom className', () => {
      renderBasicAspectRatio({ className: 'custom-aspect-ratio' });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveClass('custom-aspect-ratio');
    });

    it('renders without base styling classes', () => {
      renderBasicAspectRatio();
      const aspectRatio = screen.getByTestId('aspectratio');
      // Radix UI AspectRatio doesn't add default Tailwind classes
      expect(aspectRatio).toBeInTheDocument();
    });

    it('accepts custom classes only', () => {
      renderBasicAspectRatio({ className: 'border rounded-lg shadow-md' });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveClass('border', 'rounded-lg', 'shadow-md');
      // Radix UI doesn't add default classes
      expect(aspectRatio).not.toHaveClass('relative', 'w-full');
    });

    it('supports custom styling via style prop', () => {
      renderBasicAspectRatio({ style: { border: '2px solid red', borderRadius: '8px' } });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveAttribute('style');
    });

    it('supports responsive behavior with custom classes', () => {
      renderBasicAspectRatio({ className: 'max-w-md mx-auto' });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveClass('max-w-md', 'mx-auto');
    });
  });

  describe('Accessibility', () => {
    it('supports custom aria-label', () => {
      renderBasicAspectRatio({ 'aria-label': 'Video player container' });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveAttribute('aria-label', 'Video player container');
    });

    it('supports role attribute', () => {
      renderBasicAspectRatio({ role: 'img' });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveAttribute('role', 'img');
    });

    it('supports aria-describedby', () => {
      render(
        <div>
          <AspectRatio data-testid="aspectratio" ratio={16 / 9} aria-describedby="description">
            <div role="img" aria-label="Test placeholder">Test content</div>
          </AspectRatio>
          <div id="description">This is a 16:9 aspect ratio container</div>
        </div>
      );
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveAttribute('aria-describedby', 'description');
    });

    it('preserves content accessibility', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={1}>
          <button data-testid="accessible-button">Accessible button</button>
        </AspectRatio>
      );
      
      const button = screen.getByTestId('accessible-button');
      expect(button).toBeInTheDocument();
      button.focus();
      expect(button).toHaveFocus();
    });

    it('supports keyboard navigation for interactive content', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={16 / 9}>
          <div>
            <button data-testid="btn1">Button 1</button>
            <button data-testid="btn2">Button 2</button>
          </div>
        </AspectRatio>
      );
      
      const btn1 = screen.getByTestId('btn1');
      const btn2 = screen.getByTestId('btn2');
      
      btn1.focus();
      expect(btn1).toHaveFocus();
      
      btn2.focus();
      expect(btn2).toHaveFocus();
    });
  });

  describe('Custom Props and Ref Forwarding', () => {
    it('forwards refs correctly', () => {
      const ref = vi.fn();
      renderBasicAspectRatio({ ref });
      expect(ref).toHaveBeenCalled();
    });

    it('spreads additional props', () => {
      renderBasicAspectRatio({ 
        'data-custom': 'test-value',
        id: 'custom-aspect-ratio-id',
        title: 'Custom aspect ratio'
      });
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveAttribute('data-custom', 'test-value');
      expect(aspectRatio).toHaveAttribute('id', 'custom-aspect-ratio-id');
      expect(aspectRatio).toHaveAttribute('title', 'Custom aspect ratio');
    });

    it('handles event handlers', () => {
      const onClick = vi.fn();
      const onMouseEnter = vi.fn();
      
      renderBasicAspectRatio({ onClick, onMouseEnter });
      const aspectRatio = screen.getByTestId('aspectratio');
      
      aspectRatio.click();
      expect(onClick).toHaveBeenCalled();
    });

    it('supports data attributes', () => {
      renderBasicAspectRatio({ 
        'data-ratio-type': 'widescreen',
        'data-content-type': 'video'
      });
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toHaveAttribute('data-ratio-type', 'widescreen');
      expect(aspectRatio).toHaveAttribute('data-content-type', 'video');
    });
  });

  describe('Edge Cases', () => {
    it('handles zero ratio gracefully', () => {
      renderBasicAspectRatio({ ratio: 0 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles negative ratio gracefully', () => {
      renderBasicAspectRatio({ ratio: -1 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles extremely large ratio values', () => {
      renderBasicAspectRatio({ ratio: Number.MAX_SAFE_INTEGER });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles extremely small ratio values', () => {
      renderBasicAspectRatio({ ratio: Number.MIN_VALUE });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles null and undefined props gracefully', () => {
      renderBasicAspectRatio({ 
        className: null,
        style: undefined,
        children: undefined
      });
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles empty children', () => {
      render(
        <AspectRatio data-testid="aspectratio" ratio={1}>
          {null}
        </AspectRatio>
      );
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles component unmounting cleanly', () => {
      const { unmount } = renderBasicAspectRatio();
      expect(() => unmount()).not.toThrow();
    });

    it('preserves functionality after remounting', () => {
      const { unmount } = renderBasicAspectRatio({ ratio: 2.35 });
      unmount();
      
      renderBasicAspectRatio({ ratio: 2.35 });
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles rapid ratio changes', () => {
      const { rerender } = renderBasicAspectRatio({ ratio: 1 });
      const aspectRatio = screen.getByTestId('aspectratio');
      
      // Rapid ratio changes
      rerender(
        <AspectRatio data-testid="aspectratio" ratio={16 / 9}>
          <div data-testid="aspectratio-content">Test content</div>
        </AspectRatio>
      );
      rerender(
        <AspectRatio data-testid="aspectratio" ratio={4 / 3}>
          <div data-testid="aspectratio-content">Test content</div>
        </AspectRatio>
      );
      rerender(
        <AspectRatio data-testid="aspectratio" ratio={21 / 9}>
          <div data-testid="aspectratio-content">Test content</div>
        </AspectRatio>
      );
      
      expect(aspectRatio).toBeInTheDocument();
    });

    it('handles complex prop combinations', () => {
      renderBasicAspectRatio({ 
        ratio: 16 / 9,
        className: 'complex-class border-2',
        style: { maxWidth: '800px', margin: '0 auto' },
        'aria-label': 'Complex aspect ratio container',
        role: 'img',
        onClick: vi.fn()
      });
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
      expect(aspectRatio).toHaveClass('complex-class', 'border-2');
      expect(aspectRatio).toHaveAttribute('aria-label', 'Complex aspect ratio container');
    });

    it('maintains performance with many re-renders', () => {
      const { rerender } = renderBasicAspectRatio({ ratio: 1 });
      
      // Multiple re-renders with different ratios
      for (let i = 0; i < 10; i++) {
        const ratio = (i + 1) / 2; // 0.5, 1, 1.5, 2, etc.
        rerender(
          <AspectRatio data-testid="aspectratio" ratio={ratio}>
            <div data-testid="aspectratio-content">Test content {i}</div>
          </AspectRatio>
        );
      }
      
      const aspectRatio = screen.getByTestId('aspectratio');
      expect(aspectRatio).toBeInTheDocument();
    });
  });
});
