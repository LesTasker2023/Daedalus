import { render, screen, fireEvent } from '@testing-library/react';
import { describe, expect, it, vi } from 'vitest';
import { Toggle } from './Toggle';

describe('Toggle Component', () => {
  describe('Rendering', () => {
    it('renders without crashing', () => {
      render(<Toggle />);
      expect(document.body).toBeTruthy();
    });

    it('renders as button element by default', () => {
      render(<Toggle>Toggle Text</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toBeInTheDocument();
      expect(toggle).toHaveTextContent('Toggle Text');
    });

    it('applies custom className', () => {
      render(<Toggle className="custom-class">Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('custom-class');
    });

    it('forwards ref correctly', () => {
      const ref = vi.fn();
      render(<Toggle ref={ref}>Toggle</Toggle>);
      expect(ref).toHaveBeenCalled();
    });

    describe('Snapshots', () => {
      it('matches default snapshot', () => {
        const { container } = render(<Toggle />);
        expect(container.firstChild).toMatchSnapshot();
      });

      it('matches all variants snapshot', () => {
        const { container: defaultContainer } = render(<Toggle variant="default">Default</Toggle>);
        const { container: outlineContainer } = render(<Toggle variant="outline">Outline</Toggle>);
        
        expect(defaultContainer.firstChild).toMatchSnapshot('default variant');
        expect(outlineContainer.firstChild).toMatchSnapshot('outline variant');
      });

      it('matches all sizes snapshot', () => {
        const { container: smContainer } = render(<Toggle size="sm">Small</Toggle>);
        const { container: defaultContainer } = render(<Toggle size="default">Default</Toggle>);
        const { container: lgContainer } = render(<Toggle size="lg">Large</Toggle>);
        
        expect(smContainer.firstChild).toMatchSnapshot('small size');
        expect(defaultContainer.firstChild).toMatchSnapshot('default size');
        expect(lgContainer.firstChild).toMatchSnapshot('large size');
      });

      it('matches pressed state snapshot', () => {
        const { container } = render(<Toggle pressed>Pressed</Toggle>);
        expect(container.firstChild).toMatchSnapshot();
      });
    });
  });

  describe('Variants', () => {
    it('renders default variant correctly', () => {
      render(<Toggle variant="default">Default Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('bg-transparent');
    });

    it('renders outline variant correctly', () => {
      render(<Toggle variant="outline">Outline Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('border', 'border-input', 'bg-transparent');
    });
  });

  describe('Sizes', () => {
    it('renders small size correctly', () => {
      render(<Toggle size="sm">Small Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('h-9', 'px-2.5');
    });

    it('renders default size correctly', () => {
      render(<Toggle size="default">Default Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('h-10', 'px-3');
    });

    it('renders large size correctly', () => {
      render(<Toggle size="lg">Large Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('h-11', 'px-5');
    });
  });

  describe('States', () => {
    it('handles unpressed state by default', () => {
      render(<Toggle>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveAttribute('data-state', 'off');
      expect(toggle).toHaveAttribute('aria-pressed', 'false');
    });

    it('handles pressed state when controlled', () => {
      render(<Toggle pressed>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveAttribute('data-state', 'on');
      expect(toggle).toHaveAttribute('aria-pressed', 'true');
    });

    it('handles disabled state correctly', () => {
      render(<Toggle disabled>Disabled Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toBeDisabled();
      expect(toggle).toHaveClass('disabled:pointer-events-none', 'disabled:opacity-50');
    });

    it('does not trigger onPressedChange when disabled', () => {
      const onPressedChange = vi.fn();
      render(<Toggle disabled onPressedChange={onPressedChange}>Disabled</Toggle>);
      const toggle = screen.getByRole('button');
      
      fireEvent.click(toggle);
      expect(onPressedChange).not.toHaveBeenCalled();
    });
  });

  describe('Interactions', () => {
    it('calls onPressedChange when clicked', () => {
      const onPressedChange = vi.fn();
      render(<Toggle onPressedChange={onPressedChange}>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      fireEvent.click(toggle);
      expect(onPressedChange).toHaveBeenCalledWith(true);
    });

    it('toggles between pressed states when uncontrolled', () => {
      render(<Toggle>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      expect(toggle).toHaveAttribute('aria-pressed', 'false');
      
      fireEvent.click(toggle);
      expect(toggle).toHaveAttribute('aria-pressed', 'true');
      
      fireEvent.click(toggle);
      expect(toggle).toHaveAttribute('aria-pressed', 'false');
    });

    it('supports keyboard activation with Enter', () => {
      const onPressedChange = vi.fn();
      render(<Toggle onPressedChange={onPressedChange}>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      fireEvent.keyDown(toggle, { key: 'Enter' });
      expect(onPressedChange).toHaveBeenCalledWith(true);
    });

    it('supports keyboard activation with Space', () => {
      const onPressedChange = vi.fn();
      render(<Toggle onPressedChange={onPressedChange}>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      fireEvent.keyDown(toggle, { key: ' ' });
      expect(onPressedChange).toHaveBeenCalledWith(true);
    });
  });

  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      render(<Toggle>Toggle Button</Toggle>);
      const toggle = screen.getByRole('button');
      
      expect(toggle).toHaveAttribute('role', 'button');
      expect(toggle).toHaveAttribute('aria-pressed');
      expect(toggle).toHaveAttribute('data-state');
    });

    it('is focusable by default', () => {
      render(<Toggle>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      toggle.focus();
      expect(toggle).toHaveFocus();
    });

    it('applies focus-visible classes on keyboard focus', () => {
      render(<Toggle>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      expect(toggle).toHaveClass('focus-visible:outline-none', 'focus-visible:ring-2');
    });

    it('supports aria-label for accessibility', () => {
      render(<Toggle aria-label="Toggle notifications">ðŸ””</Toggle>);
      const toggle = screen.getByLabelText('Toggle notifications');
      expect(toggle).toBeInTheDocument();
    });
  });

  describe('Custom Styling', () => {
    it('accepts custom className', () => {
      render(<Toggle className="custom-toggle">Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('custom-toggle');
    });

    it('forwards additional props', () => {
      render(<Toggle data-testid="custom-toggle" title="Custom title">Toggle</Toggle>);
      const toggle = screen.getByTestId('custom-toggle');
      expect(toggle).toHaveAttribute('title', 'Custom title');
    });

    it('combines variant and size classes correctly', () => {
      render(<Toggle variant="outline" size="lg">Large Outline</Toggle>);
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveClass('border', 'border-input', 'h-11', 'px-5');
    });
  });

  describe('Edge Cases', () => {
    it('handles empty children gracefully', () => {
      render(<Toggle />);
      const toggle = screen.getByRole('button');
      expect(toggle).toBeInTheDocument();
      expect(toggle).toHaveTextContent('');
    });

    it('handles complex children content', () => {
      render(
        <Toggle>
          <span>Icon</span>
          <span>Text</span>
        </Toggle>
      );
      const toggle = screen.getByRole('button');
      expect(toggle).toHaveTextContent('IconText');
    });

    it('handles rapid toggling without errors', () => {
      const onPressedChange = vi.fn();
      render(<Toggle onPressedChange={onPressedChange}>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      // Rapid clicks
      for (let i = 0; i < 10; i++) {
        fireEvent.click(toggle);
      }
      
      expect(onPressedChange).toHaveBeenCalledTimes(10);
    });

    it('maintains state consistency during rapid changes', () => {
      render(<Toggle>Toggle</Toggle>);
      const toggle = screen.getByRole('button');
      
      expect(toggle).toHaveAttribute('aria-pressed', 'false');
      
      fireEvent.click(toggle);
      fireEvent.click(toggle);
      fireEvent.click(toggle);
      
      expect(toggle).toHaveAttribute('aria-pressed', 'true');
    });
  });
});
